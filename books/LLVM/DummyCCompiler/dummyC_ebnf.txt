primary_expression
	: VARIABLE_IDENTIFIER
	| CONSTANT
	| '(' , expression , ')'
	;

postfix_expression
	: primary_expression
	| FUNCTION_IDENTIFIER , '(' , [ argument_list  ] , ')'
	;

multiplicative_expression
	: postfix_expression , [ { "*" , postfix_expression  |  "/" , postfix_expression } ]
	;

additive_expression
	: multiplicative_expression , [ { "+" , multiplicative_expression  |  "-" , multiplicative_expression } ]
	;

assignment_expression
	: IDENTIFIER , '=' , additive_expression
	| additive_expression
	;

argument_list
	: assignment_expression , [ { "," , assignment_expression } ]
	;

parameter_list
	: parameter , [ { "," , parameter } ]
	;

parameter
	: INT , IDENTIFIER
	;

statement
	: assignment_statement
	| jump_statement
	;

variable_declaration_list
	: { variable_declaration }
	;

statement_list
	: { statement }
	;

expression_statement
	: ';'
	| assignment_expression , ';'
	;

jump_statement
	: RETURN , assignment_expression , ';'
	;

function_statement
	: "{" , [ variable_declaration , list ] , statement_list , "}"
	;

external_declaration
	: function_declaration 
	| function_definition
	;

variable_declaration
	: INT , IDENTIFIER , ";"
	;

prototype
	: type_specifier , IDENTIFIER , '(' , [ parameter , { "," , parameter} ] , ')' 
	;

function_declaration
	: prototype , ";"
	;

function_declaration
	: prototype , function statement
	;

translation_unit
	: { external_declaration }
	;


