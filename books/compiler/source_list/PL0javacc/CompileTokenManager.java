/* CompileTokenManager.java *//* Generated By:JavaCC: Do not edit this line. CompileTokenManager.java */package pl0;import java.io.*;/** Token Manager. */@SuppressWarnings("unused")public class CompileTokenManager implements CompileConstants {  /** Debug output. */  public static  java.io.PrintStream debugStream = System.out;  /** Set debug output. */  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }private static final int jjStopStringLiteralDfa_0(int pos, long active0){   switch (pos)   {      case 0:         if ((active0 & 0x7ffcL) != 0L)         {            jjmatchedKind = 15;            return 2;         }         return -1;      case 1:         if ((active0 & 0x480L) != 0L)            return 2;         if ((active0 & 0x7b7cL) != 0L)         {            jjmatchedKind = 15;            jjmatchedPos = 1;            return 2;         }         return -1;      case 2:         if ((active0 & 0x4048L) != 0L)            return 2;         if ((active0 & 0x3b34L) != 0L)         {            jjmatchedKind = 15;            jjmatchedPos = 2;            return 2;         }         return -1;      case 3:         if ((active0 & 0x3a34L) != 0L)         {            jjmatchedKind = 15;            jjmatchedPos = 3;            return 2;         }         if ((active0 & 0x100L) != 0L)            return 2;         return -1;      case 4:         if ((active0 & 0x810L) != 0L)         {            if (jjmatchedPos != 4)            {               jjmatchedKind = 15;               jjmatchedPos = 4;            }            return 2;         }         if ((active0 & 0x3224L) != 0L)            return 2;         return -1;      case 5:         if ((active0 & 0x800L) != 0L)            return 2;         if ((active0 & 0x2010L) != 0L)         {            jjmatchedKind = 15;            jjmatchedPos = 5;            return 2;         }         return -1;      case 6:         if ((active0 & 0x2000L) != 0L)            return 2;         if ((active0 & 0x10L) != 0L)         {            jjmatchedKind = 15;            jjmatchedPos = 6;            return 2;         }         return -1;      default :         return -1;   }}private static final int jjStartNfa_0(int pos, long active0){   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);}static private int jjStopAtPos(int pos, int kind){   jjmatchedKind = kind;   jjmatchedPos = pos;   return pos + 1;}static private int jjMoveStringLiteralDfa0_0(){   switch(curChar)   {      case 40:         return jjStopAtPos(0, 23);      case 41:         return jjStopAtPos(0, 24);      case 42:         return jjStopAtPos(0, 33);      case 43:         return jjStopAtPos(0, 32);      case 44:         return jjStopAtPos(0, 20);      case 45:         return jjStopAtPos(0, 31);      case 46:         return jjStopAtPos(0, 19);      case 47:         return jjStopAtPos(0, 34);      case 58:         return jjMoveStringLiteralDfa1_0(0x2000000L);      case 59:         return jjStopAtPos(0, 21);      case 60:         jjmatchedKind = 27;         return jjMoveStringLiteralDfa1_0(0x14000000L);      case 61:         return jjStopAtPos(0, 22);      case 62:         jjmatchedKind = 29;         return jjMoveStringLiteralDfa1_0(0x40000000L);      case 98:         return jjMoveStringLiteralDfa1_0(0x20L);      case 99:         return jjMoveStringLiteralDfa1_0(0x4L);      case 100:         return jjMoveStringLiteralDfa1_0(0x400L);      case 101:         return jjMoveStringLiteralDfa1_0(0x40L);      case 102:         return jjMoveStringLiteralDfa1_0(0x10L);      case 105:         return jjMoveStringLiteralDfa1_0(0x80L);      case 111:         return jjMoveStringLiteralDfa1_0(0x4000L);      case 114:         return jjMoveStringLiteralDfa1_0(0x800L);      case 116:         return jjMoveStringLiteralDfa1_0(0x100L);      case 118:         return jjMoveStringLiteralDfa1_0(0x8L);      case 119:         return jjMoveStringLiteralDfa1_0(0x3200L);      default :         return jjMoveNfa_0(0, 0);   }}static private int jjMoveStringLiteralDfa1_0(long active0){   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(0, active0);      return 1;   }   switch(curChar)   {      case 61:         if ((active0 & 0x2000000L) != 0L)            return jjStopAtPos(1, 25);         else if ((active0 & 0x10000000L) != 0L)            return jjStopAtPos(1, 28);         else if ((active0 & 0x40000000L) != 0L)            return jjStopAtPos(1, 30);         break;      case 62:         if ((active0 & 0x4000000L) != 0L)            return jjStopAtPos(1, 26);         break;      case 97:         return jjMoveStringLiteralDfa2_0(active0, 0x8L);      case 100:         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);      case 101:         return jjMoveStringLiteralDfa2_0(active0, 0x820L);      case 102:         if ((active0 & 0x80L) != 0L)            return jjStartNfaWithStates_0(1, 7, 2);         break;      case 104:         return jjMoveStringLiteralDfa2_0(active0, 0x300L);      case 110:         return jjMoveStringLiteralDfa2_0(active0, 0x40L);      case 111:         if ((active0 & 0x400L) != 0L)            return jjStartNfaWithStates_0(1, 10, 2);         return jjMoveStringLiteralDfa2_0(active0, 0x4L);      case 114:         return jjMoveStringLiteralDfa2_0(active0, 0x3000L);      case 117:         return jjMoveStringLiteralDfa2_0(active0, 0x10L);      default :         break;   }   return jjStartNfa_0(0, active0);}static private int jjMoveStringLiteralDfa2_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(0, old0);   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(1, active0);      return 2;   }   switch(curChar)   {      case 100:         if ((active0 & 0x40L) != 0L)            return jjStartNfaWithStates_0(2, 6, 2);         else if ((active0 & 0x4000L) != 0L)            return jjStartNfaWithStates_0(2, 14, 2);         break;      case 101:         return jjMoveStringLiteralDfa3_0(active0, 0x100L);      case 103:         return jjMoveStringLiteralDfa3_0(active0, 0x20L);      case 105:         return jjMoveStringLiteralDfa3_0(active0, 0x3200L);      case 110:         return jjMoveStringLiteralDfa3_0(active0, 0x14L);      case 114:         if ((active0 & 0x8L) != 0L)            return jjStartNfaWithStates_0(2, 3, 2);         break;      case 116:         return jjMoveStringLiteralDfa3_0(active0, 0x800L);      default :         break;   }   return jjStartNfa_0(1, active0);}static private int jjMoveStringLiteralDfa3_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(1, old0);   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(2, active0);      return 3;   }   switch(curChar)   {      case 99:         return jjMoveStringLiteralDfa4_0(active0, 0x10L);      case 105:         return jjMoveStringLiteralDfa4_0(active0, 0x20L);      case 108:         return jjMoveStringLiteralDfa4_0(active0, 0x200L);      case 110:         if ((active0 & 0x100L) != 0L)            return jjStartNfaWithStates_0(3, 8, 2);         break;      case 115:         return jjMoveStringLiteralDfa4_0(active0, 0x4L);      case 116:         return jjMoveStringLiteralDfa4_0(active0, 0x3000L);      case 117:         return jjMoveStringLiteralDfa4_0(active0, 0x800L);      default :         break;   }   return jjStartNfa_0(2, active0);}static private int jjMoveStringLiteralDfa4_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(2, old0);   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(3, active0);      return 4;   }   switch(curChar)   {      case 101:         if ((active0 & 0x200L) != 0L)            return jjStartNfaWithStates_0(4, 9, 2);         else if ((active0 & 0x1000L) != 0L)         {            jjmatchedKind = 12;            jjmatchedPos = 4;         }         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);      case 110:         if ((active0 & 0x20L) != 0L)            return jjStartNfaWithStates_0(4, 5, 2);         break;      case 114:         return jjMoveStringLiteralDfa5_0(active0, 0x800L);      case 116:         if ((active0 & 0x4L) != 0L)            return jjStartNfaWithStates_0(4, 2, 2);         return jjMoveStringLiteralDfa5_0(active0, 0x10L);      default :         break;   }   return jjStartNfa_0(3, active0);}static private int jjMoveStringLiteralDfa5_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(3, old0);   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(4, active0);      return 5;   }   switch(curChar)   {      case 105:         return jjMoveStringLiteralDfa6_0(active0, 0x10L);      case 108:         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);      case 110:         if ((active0 & 0x800L) != 0L)            return jjStartNfaWithStates_0(5, 11, 2);         break;      default :         break;   }   return jjStartNfa_0(4, active0);}static private int jjMoveStringLiteralDfa6_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(4, old0);   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(5, active0);      return 6;   }   switch(curChar)   {      case 110:         if ((active0 & 0x2000L) != 0L)            return jjStartNfaWithStates_0(6, 13, 2);         break;      case 111:         return jjMoveStringLiteralDfa7_0(active0, 0x10L);      default :         break;   }   return jjStartNfa_0(5, active0);}static private int jjMoveStringLiteralDfa7_0(long old0, long active0){   if (((active0 &= old0)) == 0L)      return jjStartNfa_0(5, old0);   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) {      jjStopStringLiteralDfa_0(6, active0);      return 7;   }   switch(curChar)   {      case 110:         if ((active0 & 0x10L) != 0L)            return jjStartNfaWithStates_0(7, 4, 2);         break;      default :         break;   }   return jjStartNfa_0(6, active0);}static private int jjStartNfaWithStates_0(int pos, int kind, int state){   jjmatchedKind = kind;   jjmatchedPos = pos;   try { curChar = input_stream.readChar(); }   catch(java.io.IOException e) { return pos + 1; }   return jjMoveNfa_0(state, pos + 1);}static final long[] jjbitVec0 = {   0x0L, 0xffffffffffffc000L, 0x7fffffffL, 0x0L};static final long[] jjbitVec2 = {   0x0L, 0xfffffffffffffffeL, 0xfffffL, 0x0L};static final long[] jjbitVec3 = {   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L};static private int jjMoveNfa_0(int startState, int curPos){   int startsAt = 0;   jjnewStateCnt = 4;   int i = 1;   jjstateSet[0] = startState;   int kind = 0x7fffffff;   for (;;)   {      if (++jjround == 0x7fffffff)         ReInitRounds();      if (curChar < 64)      {         long l = 1L << curChar;         do         {            switch(jjstateSet[--i])            {               case 0:                  if ((0x3ff000000000000L & l) != 0L)                  {                     if (kind > 16)                        kind = 16;                     { jjCheckNAdd(3); }                  }                  else if ((0x100003600L & l) != 0L)                  {                     if (kind > 1)                        kind = 1;                  }                  break;               case 2:                  if ((0x3ff000000000000L & l) == 0L)                     break;                  if (kind > 15)                     kind = 15;                  jjstateSet[jjnewStateCnt++] = 2;                  break;               case 3:                  if ((0x3ff000000000000L & l) == 0L)                     break;                  if (kind > 16)                     kind = 16;                  { jjCheckNAdd(3); }                  break;               default : break;            }         } while(i != startsAt);      }      else if (curChar < 128)      {         long l = 1L << (curChar & 077);         do         {            switch(jjstateSet[--i])            {               case 0:               case 2:                  if ((0x7fffffe07fffffeL & l) == 0L)                     break;                  if (kind > 15)                     kind = 15;                  { jjCheckNAdd(2); }                  break;               default : break;            }         } while(i != startsAt);      }      else      {         int hiByte = (curChar >> 8);         int i1 = hiByte >> 6;         long l1 = 1L << (hiByte & 077);         int i2 = (curChar & 0xff) >> 6;         long l2 = 1L << (curChar & 077);         do         {            switch(jjstateSet[--i])            {               case 0:               case 2:                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))                     break;                  if (kind > 15)                     kind = 15;                  { jjCheckNAdd(2); }                  break;               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;            }         } while(i != startsAt);      }      if (kind != 0x7fffffff)      {         jjmatchedKind = kind;         jjmatchedPos = curPos;         kind = 0x7fffffff;      }      ++curPos;      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))         return curPos;      try { curChar = input_stream.readChar(); }      catch(java.io.IOException e) { return curPos; }   }}static final int[] jjnextStates = {};private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2){   switch(hiByte)   {      case 48:         return ((jjbitVec2[i2] & l2) != 0L);      case 159:         return ((jjbitVec3[i2] & l2) != 0L);      default :         if ((jjbitVec0[i1] & l1) != 0L)            return true;         return false;   }}/** Token literal values. */public static final String[] jjstrLiteralImages = {"", null, "\143\157\156\163\164", "\166\141\162", "\146\165\156\143\164\151\157\156", "\142\145\147\151\156", "\145\156\144", "\151\146", "\164\150\145\156", "\167\150\151\154\145", "\144\157", "\162\145\164\165\162\156", "\167\162\151\164\145", "\167\162\151\164\145\154\156", "\157\144\144", null, null, null, null, "\56", "\54", "\73", "\75", "\50", "\51", "\72\75", "\74\76", "\74", "\74\75", "\76", "\76\75", "\55", "\53", "\52", "\57", };static protected Token jjFillToken(){   final Token t;   final String curTokenImage;   final int beginLine;   final int endLine;   final int beginColumn;   final int endColumn;   String im = jjstrLiteralImages[jjmatchedKind];   curTokenImage = (im == null) ? input_stream.GetImage() : im;   beginLine = input_stream.getBeginLine();   beginColumn = input_stream.getBeginColumn();   endLine = input_stream.getEndLine();   endColumn = input_stream.getEndColumn();   t = Token.newToken(jjmatchedKind, curTokenImage);   t.beginLine = beginLine;   t.endLine = endLine;   t.beginColumn = beginColumn;   t.endColumn = endColumn;   return t;}static int curLexState = 0;static int defaultLexState = 0;static int jjnewStateCnt;static int jjround;static int jjmatchedPos;static int jjmatchedKind;/** Get the next Token. */public static Token getNextToken() {  Token matchedToken;  int curPos = 0;  EOFLoop :  for (;;)  {   try   {      curChar = input_stream.BeginToken();   }   catch(java.io.IOException e)   {      jjmatchedKind = 0;      jjmatchedPos = -1;      matchedToken = jjFillToken();      return matchedToken;   }   jjmatchedKind = 0x7fffffff;   jjmatchedPos = 0;   curPos = jjMoveStringLiteralDfa0_0();   if (jjmatchedKind != 0x7fffffff)   {      if (jjmatchedPos + 1 < curPos)         input_stream.backup(curPos - jjmatchedPos - 1);      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)      {         matchedToken = jjFillToken();         return matchedToken;      }      else      {         continue EOFLoop;      }   }   int error_line = input_stream.getEndLine();   int error_column = input_stream.getEndColumn();   String error_after = null;   boolean EOFSeen = false;   try { input_stream.readChar(); input_stream.backup(1); }   catch (java.io.IOException e1) {      EOFSeen = true;      error_after = curPos <= 1 ? "" : input_stream.GetImage();      if (curChar == '\n' || curChar == '\r') {         error_line++;         error_column = 0;      }      else         error_column++;   }   if (!EOFSeen) {      input_stream.backup(1);      error_after = curPos <= 1 ? "" : input_stream.GetImage();   }   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);  }}static private void jjCheckNAdd(int state){   if (jjrounds[state] != jjround)   {      jjstateSet[jjnewStateCnt++] = state;      jjrounds[state] = jjround;   }}static private void jjAddStates(int start, int end){   do {      jjstateSet[jjnewStateCnt++] = jjnextStates[start];   } while (start++ != end);}static private void jjCheckNAddTwoStates(int state1, int state2){   jjCheckNAdd(state1);   jjCheckNAdd(state2);}    /** Constructor. */    public CompileTokenManager(SimpleCharStream stream){      if (input_stream != null)        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);    input_stream = stream;  }  /** Constructor. */  public CompileTokenManager (SimpleCharStream stream, int lexState){    ReInit(stream);    SwitchTo(lexState);  }  /** Reinitialise parser. */  static public void ReInit(SimpleCharStream stream)  {    jjmatchedPos = jjnewStateCnt = 0;    curLexState = defaultLexState;    input_stream = stream;    ReInitRounds();  }  static private void ReInitRounds()  {    int i;    jjround = 0x80000001;    for (i = 4; i-- > 0;)      jjrounds[i] = 0x80000000;  }  /** Reinitialise parser. */  static public void ReInit(SimpleCharStream stream, int lexState)  {    ReInit(stream);    SwitchTo(lexState);  }  /** Switch to specified lex state. */  static public void SwitchTo(int lexState)  {    if (lexState >= 1 || lexState < 0)      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);    else      curLexState = lexState;  }/** Lexer state names. */public static final String[] lexStateNames = {   "DEFAULT",};static final long[] jjtoToken = {   0x7fff9fffdL, };static final long[] jjtoSkip = {   0x2L, };    static protected SimpleCharStream  input_stream;    static private final int[] jjrounds = new int[4];    static private final int[] jjstateSet = new int[2 * 4];        static protected char curChar;}