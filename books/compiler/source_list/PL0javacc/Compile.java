/* Compile.java *//* Generated By:JavaCC: Do not edit this line. Compile.java */package pl0;import java.io.*;public class Compile implements CompileConstants {        static boolean objCode;        static CodeGen codeGen;        static final int MINERROR = 3;        static final int FIRSTADDR = 2;        public Compile(CodeGen c, boolean o, FileReader reader){                this(reader);                codeGen = c; objCode = o;        }  static final public boolean program() throws ParseException {System.out.println("start compilation" );          Table.blockBegin(FIRSTADDR);    block(0);    jj_consume_token(19);if (objCode)                codeGen.listCode();          System.out.println("end compilation" );          {if ("" != null) return GetSource.errorN() < MINERROR;}    throw new Error("Missing return statement in function");  }  static final public void block(int pIndex) throws ParseException {int backP;backP = codeGen.genCodeV(CodeGen.jmp, 0);    label_1:    while (true) {      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case CONST:      case VAR:      case FUNCTION:{        ;        break;        }      default:        jj_la1[0] = jj_gen;        break label_1;      }      decl();    }codeGen.backPatch(backP);          if(pIndex != 0)                Table.changeV(pIndex, codeGen.nextCode());          codeGen.genCodeV(CodeGen.ict, Table.frameL());    statement();codeGen.genCodeR();          Table.blockEnd();  }  static final public void decl() throws ParseException {    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {    case CONST:{      constDecl();      break;      }    case VAR:{      varDecl();      break;      }    case FUNCTION:{      funcDecl();      break;      }    default:      jj_la1[1] = jj_gen;      jj_consume_token(-1);      throw new ParseException();    }  }  static final public void constDecl() throws ParseException {    jj_consume_token(CONST);    constDef();    label_2:    while (true) {      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 20:{        ;        break;        }      default:        jj_la1[2] = jj_gen;        break label_2;      }      jj_consume_token(20);      constDef();    }    jj_consume_token(21);  }  static final public void constDef() throws ParseException {Token tId, tNum;    tId = jj_consume_token(IDENT);    jj_consume_token(22);    tNum = jj_consume_token(NUMBER);int num = Integer.parseInt(tNum.image);          Table.enterTconst(tId.image.intern(), num);  }  static final public void varDecl() throws ParseException {Token t;    jj_consume_token(VAR);    t = jj_consume_token(IDENT);Table.enterTvar(t.image.intern());    label_3:    while (true) {      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 20:{        ;        break;        }      default:        jj_la1[3] = jj_gen;        break label_3;      }      jj_consume_token(20);      t = jj_consume_token(IDENT);Table.enterTvar(t.image.intern());    }    jj_consume_token(21);  }  static final public void funcDecl() throws ParseException {Token t;        int fIndex;    jj_consume_token(FUNCTION);    t = jj_consume_token(IDENT);fIndex = Table.enterTfunc(t.image.intern(), codeGen.nextCode());          Table.blockBegin(FIRSTADDR);    jj_consume_token(23);    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {    case IDENT:{      t = jj_consume_token(IDENT);Table.enterTpar(t.image.intern());      label_4:      while (true) {        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {        case 20:{          ;          break;          }        default:          jj_la1[4] = jj_gen;          break label_4;        }        jj_consume_token(20);        t = jj_consume_token(IDENT);Table.enterTpar(t.image.intern());      }      break;      }    default:      jj_la1[5] = jj_gen;      ;    }    jj_consume_token(24);Table.endpar();    block(fIndex);    jj_consume_token(21);  }  static final public void statement() throws ParseException {Token t;        int backP, backP2;    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {    case BEGIN:    case IF:    case WHILE:    case RETURN:    case WRITE:    case WRITELN:    case IDENT:{      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case IDENT:{        t = jj_consume_token(IDENT);        jj_consume_token(25);        expression();int tIndex = Table.searchT(t.image.intern(), GetSource.varId);          int k = Table.kindT(tIndex);          if (k != GetSource.varId && k != GetSource.parId)                System.out.println("Lefthand "+t.image+" is not var or par");          codeGen.genCodeT(CodeGen.sto, tIndex);        break;        }      case BEGIN:{        jj_consume_token(BEGIN);        statement();        label_5:        while (true) {          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {          case 21:{            ;            break;            }          default:            jj_la1[6] = jj_gen;            break label_5;          }          jj_consume_token(21);          statement();        }        jj_consume_token(END);        break;        }      case IF:{        jj_consume_token(IF);        condition();        jj_consume_token(THEN);backP = codeGen.genCodeV(CodeGen.jpc, 0);        statement();codeGen.backPatch(backP);        break;        }      case WHILE:{        jj_consume_token(WHILE);backP2 = codeGen.nextCode();        condition();        jj_consume_token(DO);backP = codeGen.genCodeV(CodeGen.jpc, 0);        statement();codeGen.genCodeV(CodeGen.jmp, backP2);          codeGen.backPatch(backP);        break;        }      case RETURN:{        jj_consume_token(RETURN);        expression();codeGen.genCodeR();        break;        }      case WRITE:{        jj_consume_token(WRITE);        expression();codeGen.genCodeO(CodeGen.wrt);        break;        }      case WRITELN:{        jj_consume_token(WRITELN);codeGen.genCodeO(CodeGen.wrl);        break;        }      default:        jj_la1[7] = jj_gen;        jj_consume_token(-1);        throw new ParseException();      }      break;      }    default:      jj_la1[8] = jj_gen;      ;    }  }  static final public void condition() throws ParseException {int op;    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {    case ODD:{      jj_consume_token(ODD);      expression();codeGen.genCodeO(CodeGen.odd);      break;      }    case IDENT:    case NUMBER:    case 23:    case 31:    case 32:{      expression();      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 22:{        jj_consume_token(22);op = CodeGen.eq;        break;        }      case 26:{        jj_consume_token(26);op = CodeGen.neq;        break;        }      case 27:{        jj_consume_token(27);op = CodeGen.ls;        break;        }      case 28:{        jj_consume_token(28);op = CodeGen.lseq;        break;        }      case 29:{        jj_consume_token(29);op = CodeGen.gr;        break;        }      case 30:{        jj_consume_token(30);op = CodeGen.greq;        break;        }      default:        jj_la1[9] = jj_gen;        jj_consume_token(-1);        throw new ParseException();      }      expression();codeGen.genCodeO(op);      break;      }    default:      jj_la1[10] = jj_gen;      jj_consume_token(-1);      throw new ParseException();    }  }  static final public void expression() throws ParseException {boolean prefixOp = false;        int op;    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {    case 31:    case 32:{      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 31:{        jj_consume_token(31);prefixOp = true;        break;        }      case 32:{        jj_consume_token(32);        break;        }      default:        jj_la1[11] = jj_gen;        jj_consume_token(-1);        throw new ParseException();      }      break;      }    default:      jj_la1[12] = jj_gen;      ;    }    term();if (prefixOp)                  codeGen.genCodeO(CodeGen.neg);    label_6:    while (true) {      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 31:      case 32:{        ;        break;        }      default:        jj_la1[13] = jj_gen;        break label_6;      }      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 31:{        jj_consume_token(31);op = CodeGen.sub;        break;        }      case 32:{        jj_consume_token(32);op = CodeGen.add;        break;        }      default:        jj_la1[14] = jj_gen;        jj_consume_token(-1);        throw new ParseException();      }      term();codeGen.genCodeO(op);    }  }  static final public void term() throws ParseException {int op;    factor();    label_7:    while (true) {      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 33:      case 34:{        ;        break;        }      default:        jj_la1[15] = jj_gen;        break label_7;      }      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case 33:{        jj_consume_token(33);op = CodeGen.mul;        break;        }      case 34:{        jj_consume_token(34);op = CodeGen.div;        break;        }      default:        jj_la1[16] = jj_gen;        jj_consume_token(-1);        throw new ParseException();      }      factor();codeGen.genCodeO(op);    }  }  static final public void factor() throws ParseException {Token t;        int pCount = 0;    if (jj_2_1(2)) {      t = jj_consume_token(IDENT);      jj_consume_token(23);      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case IDENT:      case NUMBER:      case 23:      case 31:      case 32:{        expression();pCount++;        label_8:        while (true) {          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {          case 20:{            ;            break;            }          default:            jj_la1[17] = jj_gen;            break label_8;          }          jj_consume_token(20);          expression();pCount++;        }        break;        }      default:        jj_la1[18] = jj_gen;        ;      }      jj_consume_token(24);int tIndex = Table.searchT(t.image.intern(), GetSource.funcId);          if (Table.pars(tIndex) != pCount)                System.out.println("unmatched parameters of " + t.image);          codeGen.genCodeT(CodeGen.cal, tIndex);    } else {      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {      case NUMBER:{        t = jj_consume_token(NUMBER);codeGen.genCodeV(CodeGen.lit, Integer.parseInt(t.image));        break;        }      case IDENT:{        t = jj_consume_token(IDENT);int tIndex = Table.searchT(t.image.intern(), GetSource.varId);         int k = Table.kindT(tIndex);          switch (k) {         case GetSource.varId: case GetSource.parId:            codeGen.genCodeT(CodeGen.lod, tIndex);            break;         case GetSource.constId:            codeGen.genCodeV(CodeGen.lit, Table.val(tIndex));            break;          }        break;        }      case 23:{        jj_consume_token(23);        expression();        jj_consume_token(24);        break;        }      default:        jj_la1[19] = jj_gen;        jj_consume_token(-1);        throw new ParseException();      }    }  }  static private boolean jj_2_1(int xla) {    jj_la = xla; jj_lastpos = jj_scanpos = token;    try { return !jj_3_1(); }    catch(LookaheadSuccess ls) { return true; }    finally { jj_save(0, xla); }  }  static private boolean jj_3_1() {    if (jj_scan_token(IDENT)) return true;    if (jj_scan_token(23)) return true;    return false;  }  static private boolean jj_initialized_once = false;  /** Generated Token Manager. */  static public CompileTokenManager token_source;  static SimpleCharStream jj_input_stream;  /** Current token. */  static public Token token;  /** Next token. */  static public Token jj_nt;  static private int jj_ntk;  static private Token jj_scanpos, jj_lastpos;  static private int jj_la;  static private int jj_gen;  static final private int[] jj_la1 = new int[20];  static private int[] jj_la1_0;  static private int[] jj_la1_1;  static {      jj_la1_init_0();      jj_la1_init_1();   }   private static void jj_la1_init_0() {      jj_la1_0 = new int[] {0x1c,0x1c,0x100000,0x100000,0x100000,0x8000,0x200000,0xbaa0,0xbaa0,0x7c400000,0x8081c000,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x100000,0x80818000,0x818000,};   }   private static void jj_la1_init_1() {      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x6,0x6,0x0,0x1,0x0,};   }  static final private JJCalls[] jj_2_rtns = new JJCalls[1];  static private boolean jj_rescan = false;  static private int jj_gc = 0;  /** Constructor with InputStream. */  public Compile(java.io.InputStream stream) {     this(stream, null);  }  /** Constructor with InputStream and supplied encoding */  public Compile(java.io.InputStream stream, String encoding) {    if (jj_initialized_once) {      System.out.println("ERROR: Second call to constructor of static parser.  ");      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");      System.out.println("       during parser generation.");      throw new Error();    }    jj_initialized_once = true;    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }    token_source = new CompileTokenManager(jj_input_stream);    token = new Token();    jj_ntk = -1;    jj_gen = 0;    for (int i = 0; i < 20; i++) jj_la1[i] = -1;    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();  }  /** Reinitialise. */  static public void ReInit(java.io.InputStream stream) {     ReInit(stream, null);  }  /** Reinitialise. */  static public void ReInit(java.io.InputStream stream, String encoding) {    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }    token_source.ReInit(jj_input_stream);    token = new Token();    jj_ntk = -1;    jj_gen = 0;    for (int i = 0; i < 20; i++) jj_la1[i] = -1;    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();  }  /** Constructor. */  public Compile(java.io.Reader stream) {    if (jj_initialized_once) {      System.out.println("ERROR: Second call to constructor of static parser. ");      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");      System.out.println("       during parser generation.");      throw new Error();    }    jj_initialized_once = true;    jj_input_stream = new SimpleCharStream(stream, 1, 1);    token_source = new CompileTokenManager(jj_input_stream);    token = new Token();    jj_ntk = -1;    jj_gen = 0;    for (int i = 0; i < 20; i++) jj_la1[i] = -1;    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();  }  /** Reinitialise. */  static public void ReInit(java.io.Reader stream) {    jj_input_stream.ReInit(stream, 1, 1);    token_source.ReInit(jj_input_stream);    token = new Token();    jj_ntk = -1;    jj_gen = 0;    for (int i = 0; i < 20; i++) jj_la1[i] = -1;    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();  }  /** Constructor with generated Token Manager. */  public Compile(CompileTokenManager tm) {    if (jj_initialized_once) {      System.out.println("ERROR: Second call to constructor of static parser. ");      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");      System.out.println("       during parser generation.");      throw new Error();    }    jj_initialized_once = true;    token_source = tm;    token = new Token();    jj_ntk = -1;    jj_gen = 0;    for (int i = 0; i < 20; i++) jj_la1[i] = -1;    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();  }  /** Reinitialise. */  public void ReInit(CompileTokenManager tm) {    token_source = tm;    token = new Token();    jj_ntk = -1;    jj_gen = 0;    for (int i = 0; i < 20; i++) jj_la1[i] = -1;    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();  }  static private Token jj_consume_token(int kind) throws ParseException {    Token oldToken;    if ((oldToken = token).next != null) token = token.next;    else token = token.next = token_source.getNextToken();    jj_ntk = -1;    if (token.kind == kind) {      jj_gen++;      if (++jj_gc > 100) {        jj_gc = 0;        for (int i = 0; i < jj_2_rtns.length; i++) {          JJCalls c = jj_2_rtns[i];          while (c != null) {            if (c.gen < jj_gen) c.first = null;            c = c.next;          }        }      }      return token;    }    token = oldToken;    jj_kind = kind;    throw generateParseException();  }  @SuppressWarnings("serial")  static private final class LookaheadSuccess extends java.lang.Error { }  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();  static private boolean jj_scan_token(int kind) {    if (jj_scanpos == jj_lastpos) {      jj_la--;      if (jj_scanpos.next == null) {        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();      } else {        jj_lastpos = jj_scanpos = jj_scanpos.next;      }    } else {      jj_scanpos = jj_scanpos.next;    }    if (jj_rescan) {      int i = 0; Token tok = token;      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }      if (tok != null) jj_add_error_token(kind, i);    }    if (jj_scanpos.kind != kind) return true;    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;    return false;  }/** Get the next Token. */  static final public Token getNextToken() {    if (token.next != null) token = token.next;    else token = token.next = token_source.getNextToken();    jj_ntk = -1;    jj_gen++;    return token;  }/** Get the specific Token. */  static final public Token getToken(int index) {    Token t = token;    for (int i = 0; i < index; i++) {      if (t.next != null) t = t.next;      else t = t.next = token_source.getNextToken();    }    return t;  }  static private int jj_ntk_f() {    if ((jj_nt=token.next) == null)      return (jj_ntk = (token.next=token_source.getNextToken()).kind);    else      return (jj_ntk = jj_nt.kind);  }  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();  static private int[] jj_expentry;  static private int jj_kind = -1;  static private int[] jj_lasttokens = new int[100];  static private int jj_endpos;  static private void jj_add_error_token(int kind, int pos) {    if (pos >= 100) return;    if (pos == jj_endpos + 1) {      jj_lasttokens[jj_endpos++] = kind;    } else if (jj_endpos != 0) {      jj_expentry = new int[jj_endpos];      for (int i = 0; i < jj_endpos; i++) {        jj_expentry[i] = jj_lasttokens[i];      }      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {        int[] oldentry = (int[])(it.next());        if (oldentry.length == jj_expentry.length) {          for (int i = 0; i < jj_expentry.length; i++) {            if (oldentry[i] != jj_expentry[i]) {              continue jj_entries_loop;            }          }          jj_expentries.add(jj_expentry);          break jj_entries_loop;        }      }      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;    }  }  /** Generate ParseException. */  static public ParseException generateParseException() {    jj_expentries.clear();    boolean[] la1tokens = new boolean[35];    if (jj_kind >= 0) {      la1tokens[jj_kind] = true;      jj_kind = -1;    }    for (int i = 0; i < 20; i++) {      if (jj_la1[i] == jj_gen) {        for (int j = 0; j < 32; j++) {          if ((jj_la1_0[i] & (1<<j)) != 0) {            la1tokens[j] = true;          }          if ((jj_la1_1[i] & (1<<j)) != 0) {            la1tokens[32+j] = true;          }        }      }    }    for (int i = 0; i < 35; i++) {      if (la1tokens[i]) {        jj_expentry = new int[1];        jj_expentry[0] = i;        jj_expentries.add(jj_expentry);      }    }    jj_endpos = 0;    jj_rescan_token();    jj_add_error_token(0, 0);    int[][] exptokseq = new int[jj_expentries.size()][];    for (int i = 0; i < jj_expentries.size(); i++) {      exptokseq[i] = jj_expentries.get(i);    }    return new ParseException(token, exptokseq, tokenImage);  }  /** Enable tracing. */  static final public void enable_tracing() {  }  /** Disable tracing. */  static final public void disable_tracing() {  }  static private void jj_rescan_token() {    jj_rescan = true;    for (int i = 0; i < 1; i++) {    try {      JJCalls p = jj_2_rtns[i];      do {        if (p.gen > jj_gen) {          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;          switch (i) {            case 0: jj_3_1(); break;          }        }        p = p.next;      } while (p != null);      } catch(LookaheadSuccess ls) { }    }    jj_rescan = false;  }  static private void jj_save(int index, int xla) {    JJCalls p = jj_2_rtns[index];    while (p.gen > jj_gen) {      if (p.next == null) { p = p.next = new JJCalls(); break; }      p = p.next;    }    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;  }  static final class JJCalls {    int gen;    Token first;    int arg;    JJCalls next;  }}